{"version":3,"sources":["Components/Carrousel/movie/index.js","Components/Carrousel/index.js","App.js","serviceWorker.js","index.js"],"names":["Movie","props","state","hover","cond","this","setState","onMouseEnter","onMouseLeave","className","data-id","id","src","image","React","Component","Carrousel","CarrouselX","index","itemSlide","maxItem","moved","itemPush","hoverCond","self","setInterval","window","addEventListener","resizeWindow","innerWidth","handleChange","change","data","length","push","i","forceUpdate","map","item","key","title","hoverCarrousel","onClick","moveLeft","moveRight","movie","App","Animes","Movies","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1ed63f9f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style.css';\r\n\r\nclass Movie extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hover: 0\r\n    }\r\n  }\r\n  hover(cond){\r\n    this.setState(state => ({\r\n        hover: cond\r\n    }));\r\n  }\r\n  render(){\r\n    return <div \r\n    onMouseEnter={() => this.hover(true)}\r\n    onMouseLeave={() => this.hover(false)}\r\n    className={\"movie \" + (this.state.hover ? 'hover': 'notHover')} data-id={this.props.id}>\r\n       <img src={this.props.image}/>\r\n    </div>\r\n  };\r\n}\r\n\r\nexport default Movie;","import React from 'react';\r\nimport './style.css';\r\nimport Movie from './movie';\r\n\r\nclass Carrousel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      CarrouselX: 1,\r\n      index: 0,\r\n      itemSlide: 0,\r\n      maxItem: 6,\r\n      moved: false,\r\n      itemPush: [],\r\n      hoverCond: false\r\n    }\r\n  }\r\n  componentDidMount(){\r\n    const self = this;\r\n    setInterval(() => {\r\n      window.addEventListener('resize', this.resizeWindow(self))\r\n    }, 1000);\r\n  }\r\n  resizeWindow(self){\r\n    if(window.innerWidth >= 1384){\r\n      self.handleChange(5)\r\n    }\r\n    else if(window.innerWidth >= 1383){\r\n      self.handleChange(4)\r\n    } else if(window.innerWidth >= 1069){\r\n      self.handleChange(3)\r\n    } else if(window.innerWidth >= 803){\r\n      self.handleChange(2)\r\n    } else if(window.innerWidth <= 623){\r\n      self.handleChange(1)\r\n    } else{\r\n      self.handleChange(5)\r\n    }\r\n  }\r\n  handleChange(change) {\r\n    this.setState(state => ({\r\n      CarrouselX: change\r\n    }))\r\n    this.setState(state => ({\r\n      maxItem: (this.props.data.length - 1) / this.state.CarrouselX\r\n    }))\r\n    this.setState(state => ({\r\n      itemPush: []\r\n    }))\r\n    if(this.state.itemSlide > this.state.maxItem){\r\n      this.state.itemSlide = this.state.maxItem\r\n    }\r\n    var push = []\r\n    for(let i=0; i< this.state.maxItem; i++){\r\n      push.push({i})\r\n    }\r\n    this.setState(state => ({\r\n      itemPush: push\r\n    }))\r\n  }\r\n  moveRight(){\r\n    if(this.state.itemSlide >= this.state.maxItem - 1){\r\n      return\r\n    } else{\r\n    this.setState(state => ({\r\n      itemSlide: state.itemSlide + 1\r\n    }));\r\n    }\r\n    this.forceUpdate()\r\n  }\r\n  moveLeft(){\r\n    if(this.state.itemSlide === 0){\r\n      return\r\n    } else{\r\n    this.setState(state => ({\r\n      itemSlide: state.itemSlide - 1\r\n    }));\r\n    this.forceUpdate()\r\n  }\r\n  }\r\n  hoverCarrousel(cond){\r\n    this.setState(state => ({\r\n      hoverCond: cond\r\n    }));\r\n  }\r\n  render(){\r\n    return  <div className=\"wrapper\">\r\n      { this.state.hoverCond && <div className=\"absolute-w\">\r\n      { this.state.itemPush.map((item, index) => (  \r\n        <li key={index} className={this.state.itemSlide == index  ? 'ativo' : ''}>\r\n\r\n        </li>\r\n      )) }\r\n      </div> }\r\n      <div className=\"title\">\r\n        <h1> { this.props.title } </h1>\r\n      </div>\r\n      <div className=\"carrouselInner\"\r\n      onMouseEnter={() => this.hoverCarrousel(true)}\r\n      onMouseLeave={() => this.hoverCarrousel(false)}>\r\n      { this.state.hoverCond && \r\n       <div className=\"arrows\">\r\n        { this.state.itemSlide > 0 && <div \r\n        onClick={() => { this.moveLeft() }}\r\n        className=\"arrow arrowLeft\">\r\n        <i className=\"fas fa-arrow-left\"></i>\r\n        </div> }\r\n        <div \r\n        onClick={() => { this.moveRight() }}\r\n        className=\"arrow arrowRight\">\r\n        <i className=\"fas fa-arrow-right\"></i>\r\n        </div>\r\n      </div>\r\n       }\r\n      <div className={\"listMovie \" + (this.state.moved ? 'moved' : 'notMoved') }>\r\n      { this.props.data.map((movie, index) => (  \r\n        <div className=\"item\" id={index} key={index}>\r\n        { this.state.itemSlide * this.state.CarrouselX <= index && <Movie image={movie.image}/> }\r\n        </div>\r\n       )) }\r\n      </div>\r\n    </div>\r\n    </div>\r\n  };\r\n}\r\n\r\nexport default Carrousel;","import React from 'react';\nimport './style.css';\nimport Carrousel from './Components/Carrousel';\nimport Animes from './animes.json';\nimport Movies from './movies.json';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Carrousel \n      title=\"Animes\"\n      data={Animes}></Carrousel>\n      <Carrousel \n      title=\"Filmes\"\n      data={Movies}></Carrousel>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}